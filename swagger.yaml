# OpenAPI specification version
openapi: 3.0.0

# Basic API information and metadata
info:
  title: Your API Documentation
  description: |
    Complete API documentation for the application.
    
    ## Authentication
    All protected endpoints require a JWT Bearer token that can be obtained from the /api/auth/login endpoint.
    
    ## Error Handling
    All endpoints follow a consistent error response format with appropriate HTTP status codes.
  version: 1.0.0
  contact:
    name: Sapan Gajjar
    email: sapangajjar101105@gmail.com

# Server configurations for different environments
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.yourproduction.com
    description: Production server

# Reusable components including security schemes and data models
components:
  # Security scheme definitions
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Data models (schemas) used throughout the API
  schemas:
    # User model definition
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        username:
          type: string
          description: User's display name
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          description: User's email address
        createdAt:
          type: string
          format: date-time
          description: Timestamp of user creation
        role:
          type: string
          enum: [user, admin]
          description: User's role in the system
        isActive:
          type: boolean
          description: Whether the user account is active

    # Error response model
    Error:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details if available

    # Login response model
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        user:
          $ref: '#/components/schemas/User'

# API endpoints definitions
paths:
  # Authentication endpoints
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and receive a JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: "********"
              required:
                - email
                - password
      responses:
        # Successful login response
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        # Authentication failure response
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # Validation error response
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User registration endpoint
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "********"
              required:
                - username
                - email
                - password
      responses:
        # Successful registration response
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        # Invalid input response
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # Duplicate email response
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User management endpoints
  /api/users:
    # Get all users endpoint (admin only)
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (requires admin privileges)
      operationId: getAllUsers
      security:
        - BearerAuth: []
      # Query parameters for filtering and pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: role
          schema:
            type: string
            enum: [user, admin]
          description: Filter users by role
      responses:
        # Successful response with pagination
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
        # Authentication and authorization error responses
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Create new user endpoint (admin only)
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account (admin only)
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "jane_doe"
                email:
                  type: string
                  format: email
                  example: "jane@example.com"
                password:
                  type: string
                  format: password
                  example: "********"
                role:
                  type: string
                  enum: [user, admin]
                  example: "user"
              required:
                - username
                - email
                - password
      responses:
        # Successful user creation response
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        # Error responses
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Individual user operations
  /api/users/{userId}:
    # Common parameter for user ID
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the user
    
    # Get user by ID endpoint
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user's details
      operationId: getUserById
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Update user endpoint
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (admin or own account)
      operationId: updateUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, admin]
                isActive:
                  type: boolean
      responses:
        # Successful update response
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        # Error responses
        '403':
          description: Forbidden - Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Delete user endpoint
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account (admin only)
      operationId: deleteUser
      security:
        - BearerAuth: []
      responses:
        # Successful deletion response
        '204':
          description: User deleted successfully
        # Error responses
        '403':
          description: Forbidden - Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 